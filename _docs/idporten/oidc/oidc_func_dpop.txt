
title: DPoP
description: ID-portens funksjonalitet for DPoP - Demonstration of Proof of Possession
summary: "DPoP gir beskyttelse mot stjeling og misbruk av tokens ved å binde dem til klienten"
sidebar: oidc
product: ID-porten
redirect_from: /oidc_func_dpop

Om funksjonaliteten
DPoP - Demonstration of Proof of Possession - er en mekanisme som beskytter mot misbruk av tokens ved å binde dem kryptografisk til klienten som hentet dem.
Metoden gjør det vanskeligere for en angriper å bruke tokens som er blitt stjålet, for eksempel via man-in-the-middle-angrep. Et vanlig token kan brukes av hvem som helst som får tak i det via lekkasje eller lignende, før det går ut på tid.
DPoP er definert i RFC9449, og vi henviser til denne for detaljert dokumentasjon.
DPoP brukes slik:

Klienten genererer et DPoP JWT med kort levetid (f.eks 1 minutt) som er bundet til metode og url, og klienten signerer det med en privat nøkkel.
JWT-en sendes i  http header sammen med kall mot /token.
ID-porten validerer at DPoP-headeren er korrekt signert og samsvarer med forespørselen.
Tilgangstokenet som returneres blir bundet til klientens offentlige nøkkel, og kan bare brukes sammen med gyldig DPoP-header.

DPoP krever at klienten har støtte for:

Generering og håndtering av nøkkelpar (public/private). Nøkkelen kan autogeneres eller ligge på et trygt område avhengig av klienttype
Signering av JWT-er
Inkludering av -felt i  header

Tilgangstokenet man får i retur skal inneholde  med en  som er en "thumbprint" av den offentlige nøkkelen brukt tidligere.
Forespørsler mot API som støtter DPoP må bruke Authorization type DPoP og inkludere DPoP-proof i header.
Refresh tokens med DPoP
Når DPoP benyttes, vil også refresh tokens være bundet til klientens offentlige nøkkel, dersom klienten ikke bruker klientautentisering.
Det innebærer:

Refresh tokens kan kun brukes sammen med en gyldig DPoP-header som samsvarer med den opprinnelige nøkkelen.
Ved rotering av nøkkelpar må nytt refresh token hentes med den nye nøkkelen.
Klienter må derfor sørge for sikker og stabil nøkkelhåndtering over tid.

Dersom DPoP ikke brukes korrekt ved fornyelse av tokens, vil forespørselen bli avvist.
NB: For klienter som bruker klientautenisering, kan man selv velge å bruke refresh tokenet til å få tilbake et tilgangstoken som er bundet til DPoP eller ikke.
API-støtte for DPoP
For at DPoP skal gi full sikkerhet, må også API-ene som tilgangstokenet brukes mot, støtte og validere DPoP-tokenbindingen.
Dette innebærer:

Access tokens må være DPoP-bundet: API-et må forvente at tilgangstokenet kun kan brukes sammen med en gyldig -header i hver forespørsel.
Validering av DPoP-header: API-et bør verifisere at:
JWT-en i -headeren er korrekt signert
 og -feltene stemmer med HTTP-metoden og URL-en til API-kallet
JWT-en ikke er gjenbrukt (replay protection)


Bekreftelse av token-binding: -feltet i access token må inneholde en JWK thumbprint (), som skal matche JWK i -headeren.
Respons ved feil: Ved feil i DPoP-validering skal API-et returnere  med  header som beskriver feilen, f.eks.:
  

API-leverandører må derfor sørge for:

Biblioteker/verktøy som støtter DPoP-verifisering
Mulighet til å hente -feltet fra token
Robust validering og feilhåndtering

Eksempel
Et DPoP-bevis skl inkluderes i http headeren med navn DPoP i alle kall til token-endepunktet og i alle kall til API-er som krever DPoP.
DPoP headeren heter DPoP og innholdet er DPoP-beviset i base64-format.

Når man dekoder DPoP-beviset ser det slik ut:
```
{
  "typ": "dpop+jwt",
  "alg": "ES256",
  "jwk": {
    "kty": "EC",
    "x": "l8tFrhx-34tV3hRICRDY9zCkDlpBhF42UQUfWVAWBFs",
    "y": "9VE4jf_Ok_o64zbTTlcuNJajHmt6v9TDVrU0CdvGRDA",
    "crv": "P-256"
  }
}.
{
  "jti": "-BwC3ESc6acc2lTc",
  "htm": "POST",
  "htu": "https://server.example.com/token",
  "iat": 1562262616
}.
{
[Signatur]
}
typdpop+jwtalgjwkhtmhtuiat`: er en Unix timestamp som forteller når JWT-en ble opprettet
JWT'en signeres med privat-nøkkelen som hører til den offentlige nøkkelen. Man må ta vare på den private nøkkelen på en trygg måte.
Responsen vil se slik ut:

Og i access tokenet vil det være en thumbprint av den offentlige nøkkelen:

Etter token response:
* : Når man så skal bruke det dpop-bundne tokenet, må man inkludere en hash av tilgangstokenet i claimet 
* : Dersom det kommer en nonce-verdi i token responsen, må DPoP-beviset også inneholde det.
Eksempel på API-forespørsel:

der DPoP-beviset ser slik ut når man dekoder det:

Vi anbefaler å bruke et bibliotek. Se eksempler i java her

For hjelp eller spørsmål, ta kontakt via Digdirs supportkanaler. 